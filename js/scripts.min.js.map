{"version":3,"sources":["search.js","weather.js"],"names":["substringMatcher","strs","q","cb","matches","substrRegex","RegExp","$","each","i","str","test","push","cities","getJSON","response","index","city","name","fail","jqxhr","textStatus","error","err","console","log","typeahead","hint","highlight","minLength","source","jQuery","document","ready","on","event","selection","cityName","openWeatherAPI","openWeatherOptions","mode","units","timeConverter","UNIX_timestamp","a","Date","hour","getHours","min","getMinutes","sec","getSeconds","time","dateConverter","months","year","getFullYear","month","getMonth","date","getDate","displayDate","displayIcon","iconId","description","icon","displayError","displayWeather","empty","weatherHTML","sys","country","weather","main","temp","dt","sunrise","sunset","pressure","wind","speed","humidity","html"],"mappings":"AAAA,GAAAA,kBAAA,SAAAC,GACA,MAAA,UAAAC,EAAAC,GACA,GAAAC,EAGAA,MAGAC,YAAA,GAAAC,QAAAJ,EAAA,KAIAK,EAAAC,KAAAP,EAAA,SAAAQ,EAAAC,GACAL,YAAAM,KAAAD,IACAN,EAAAQ,KAAAF,KAIAP,EAAAC,KAIAS,SAEAN,GAAAO,QAAA,iBAAA,SAAAC,GACAR,EAAAC,KAAAO,EAAA,SAAAC,EAAAC,GACAJ,OAAAD,KAAAK,EAAAC,UAEAC,KAAA,SAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAF,EAAA,KAAAC,CACAE,SAAAC,IAAA,mBAAAF,KAcAhB,EAAA,0BAAAmB,WACAC,MAAA,EACAC,WAAA,EACAC,UAAA,IAGAX,KAAA,SACAY,OAAA9B,iBAAAa,UCnDAkB,OAAAC,UAAAC,MAAA,SAAA1B,GACAA,EAAA,wBAAA2B,GAAA,qBAAA,SAAAC,EAAAC,GACAZ,QAAAC,IAAAW,EAGA,IAAAC,GAAAD,EAEAE,EAAA,kGACAC,GACAC,KAAA,OACAC,MAAA,SACAvC,EAAAmC,GAGAK,EAAA,SAAAC,GACA,GAAAC,GAAA,GAAAC,MAAA,IAAAF,GAKAG,EAAAF,EAAAG,WAAA,GAAA,IAAAH,EAAAG,WAAAH,EAAAG,WACAC,EAAAJ,EAAAK,aAAA,GAAA,IAAAL,EAAAK,aAAAL,EAAAK,aACAC,EAAAN,EAAAO,aAAA,GAAA,IAAAP,EAAAO,aAAAP,EAAAO,aACAC,EAAAN,EAAA,IAAAE,EAAA,IAAAE,CACA,OAAAE,IAGAC,EAAA,SAAAV,GACA,GAAAC,GAAA,GAAAC,MAAA,IAAAF,GACAW,GAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OACAC,EAAAX,EAAAY,cACAC,EAAAH,EAAAV,EAAAc,YACAC,EAAAf,EAAAgB,UAEAC,EAAAF,EAAA,IAAAF,EAAA,IAAAF,CACA,OAAAM,IAGAC,EAAA,SAAAC,EAAAC,GACA,GAAAC,GAAA,6CAAAF,EAAA,cAAAC,EAAA,yBACA,OAAAC,IAGAC,EAAA,SAAA9C,EAAAC,EAAAC,GACA,GAAAC,GAAAF,EAAA,KAAAC,CACAE,SAAAC,IAAA,mBAAAF,IAGA4C,EAAA,SAAApD,GAEAR,EAAA,YAAA6D,OACA,IAAAC,GAAA,mBACAA,IAAA,OAAAtD,EAAAG,KAAA,KAAAH,EAAAuD,IAAAC,QAAAT,EAAA/C,EAAAyD,QAAA,GAAAP,KAAAlD,EAAAyD,QAAA,GAAAR,aAAA,QACAK,GAAA,OAAAtD,EAAA0D,KAAAC,KAAA,WACAL,GAAA,0BAAAtD,EAAAyD,QAAA,GAAAR,YAAA,QACAK,GAAA,cAAAhB,EAAAtC,EAAA4D,IAAA,QACAN,GAAA,oBAAA3B,EAAA3B,EAAAuD,IAAAM,SAAA,QACAP,GAAA,mBAAA3B,EAAA3B,EAAAuD,IAAAO,QAAA,QACAR,GAAA,kBAAAtD,EAAA0D,KAAAK,SAAA,YACAT,GAAA,oBAAAtD,EAAAgE,KAAAC,MAAA,aACAX,GAAA,kBAAAtD,EAAA0D,KAAAQ,SAAA,UACAZ,GAAA,QAEA9D,EAAA,YAAA2E,KAAAb,GAGA9D,GAAAO,QAAAwB,EAAAC,EAAA4B,GAAAhD,KAAA+C","file":"scripts.min.js","sourcesContent":["var substringMatcher = function(strs) {\n  return function findMatches(q, cb) {\n    var matches, substringRegex;\n\n    // an array that will be populated with substring matches\n    matches = [];\n\n    // regex used to determine if a string contains the substring `q`\n    substrRegex = new RegExp(q, 'i');\n\n    // iterate through the pool of strings and for any string that\n    // contains the substring `q`, add it to the `matches` array\n    $.each(strs, function(i, str) {\n      if (substrRegex.test(str)) {\n        matches.push(str);\n      }\n    });\n\n    cb(matches);\n  };\n};\n\nvar cities = [];\n\n$.getJSON('city.list.json', function(response) {\n    $.each(response, function(index, city) {\n      cities.push(city.name);\n    });\n}).fail(function( jqxhr, textStatus, error ) {\n    var err = textStatus + \", \" + error;\n    console.log( \"Request Failed: \" + err );\n  });\n\n// var states = ['London', 'Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California',\n//   'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii',\n//   'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana',\n//   'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota',\n//   'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire',\n//   'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota',\n//   'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island',\n//   'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont',\n//   'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'\n// ];\n\n$('#the-basics .typeahead').typeahead({\n  hint: true,\n  highlight: true,\n  minLength: 1\n},\n{\n  name: 'cities',\n  source: substringMatcher(cities)\n});","jQuery(document).ready(function($) {\n  $('input[type=\"search\"]').on('typeahead:selected', function(event, selection) {\n    console.log(selection);\n\n    // TODO capture the value of search input\n    var cityName = selection;\n\n    var openWeatherAPI = 'http://api.openweathermap.org/data/2.5/weather?appid=68d06ff44fb97dc7a6ea98b54f8374ba&callback=';\n    var openWeatherOptions = {\n      mode  : 'JSON',\n      units : 'metric',\n      q     : cityName,\n    };\n\n    var timeConverter = function(UNIX_timestamp){\n      var a = new Date(UNIX_timestamp * 1000);\n      // var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n      // var year = a.getFullYear();\n      // var month = months[a.getMonth()];\n      // var date = a.getDate();\n      var hour = a.getHours() < 10 ? '0' + a.getHours() : a.getHours();\n      var min = a.getMinutes() < 10 ? '0' + a.getMinutes() : a.getMinutes();\n      var sec = a.getSeconds() < 10 ? '0' + a.getSeconds() : a.getSeconds();\n      var time =  hour + ':' + min + ':' + sec ;\n      return time;\n    };\n\n    var dateConverter = function(UNIX_timestamp) {\n      var a = new Date(UNIX_timestamp * 1000);\n      var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n      var year = a.getFullYear();\n      var month = months[a.getMonth()];\n      var date = a.getDate();\n\n      var displayDate = date + ' ' + month + ' ' + year;\n      return displayDate;\n    };\n\n    var displayIcon = function(iconId, description) {\n      var icon = '<img src=\"http://openweathermap.org/img/w/' + iconId + '.png\" alt=\"' + description + '\" class=\"weather-icon\">';\n      return icon;\n    };\n\n    var displayError = function( jqxhr, textStatus, error ) {\n      var err = textStatus + \", \" + error;\n      console.log( \"Request Failed: \" + err );\n    };\n\n    var displayWeather = function(response) {\n    \n      $('#results').empty(); // clear the previous search\n      var weatherHTML = '<ul class=\"list\">';\n      weatherHTML += '<li>' + response.name + ', ' + response.sys.country + displayIcon(response.weather[0].icon, response.weather[0].description) + '</li>';\n      weatherHTML += '<li>' + response.main.temp +' Â°C</li>';\n      weatherHTML += '<li class=\"capitalize\">' + response.weather[0].description +'</li>';\n      weatherHTML += '<li> Date: ' + dateConverter(response.dt) +'</li>';\n      weatherHTML += '<li> Sunrise at: ' + timeConverter(response.sys.sunrise) +'</li>';\n      weatherHTML += '<li> Sunset at: ' + timeConverter(response.sys.sunset) +'</li>';\n      weatherHTML += '<li> Pressure: ' + response.main.pressure +' hpa</li>';\n      weatherHTML += '<li> Wind speed: ' + response.wind.speed +' km/h</li>';\n      weatherHTML += '<li> Humidity: ' + response.main.humidity +' %</li>';\n      weatherHTML += '</ul>';\n\n      $('#results').html(weatherHTML);\n    };\n\n    $.getJSON(openWeatherAPI, openWeatherOptions, displayWeather).fail(displayError);\n  }); // end typehead:selected event \n}); // end ready\n"]}