{"version":3,"sources":["search.js","weather.js"],"names":["cities","substringMatcher","strs","q","cb","matches","substrRegex","RegExp","$","each","i","str","test","push","getJSON","response","index","city","name","fail","jqxhr","textStatus","error","err","console","log","typeahead","hint","highlight","minLength","source","jQuery","document","ready","$search","on","event","selection","cityName","openWeatherAPI","openWeatherOptions","mode","units","timeConverter","UNIX_timestamp","a","Date","hour","getHours","min","getMinutes","sec","getSeconds","time","dateConverter","months","year","getFullYear","month","getMonth","date","getDate","displayDate","Handlebars","registerHelper","timestamp","Utils","escapeExpression","result","SafeString","src","alt","ajax","dataType","data","success","template","html","templateFunction","compile","htmlContent","val"],"mappings":"AAAA,GAAAA,WACAC,iBAAA,SAAAC,GACA,MAAA,UAAAC,EAAAC,GACA,GAAAC,EAGAA,MAGAC,YAAA,GAAAC,QAAAJ,EAAA,KAIAK,EAAAC,KAAAP,EAAA,SAAAQ,EAAAC,GACAL,YAAAM,KAAAD,IACAN,EAAAQ,KAAAF,KAIAP,EAAAC,IAIAG,GAAAM,QAAA,iBAAA,SAAAC,GACAP,EAAAC,KAAAM,EAAA,SAAAC,EAAAC,GACAjB,OAAAa,KAAAI,EAAAC,UAEAC,KAAA,SAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAF,EAAA,KAAAC,CACAE,SAAAC,IAAA,mBAAAF,KAGAf,EAAA,0BAAAkB,WACAC,MAAA,EACAC,WAAA,EACAC,UAAA,IAGAX,KAAA,SACAY,OAAA7B,iBAAAD,UCvCA+B,OAAAC,UAAAC,MAAA,SAAAzB,GACA,GAAA0B,GAAA1B,EAAA,UAEA0B,GAAAC,GAAA,qBAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAD,EACAE,EAAA,kGACAC,GACAC,KAAA,OACAC,MAAA,SACAvC,EAAAmC,GAGAK,EAAA,SAAAC,GACA,GAAAC,GAAA,GAAAC,MAAA,IAAAF,GACAG,EAAAF,EAAAG,WAAA,GAAA,IAAAH,EAAAG,WAAAH,EAAAG,WACAC,EAAAJ,EAAAK,aAAA,GAAA,IAAAL,EAAAK,aAAAL,EAAAK,aACAC,EAAAN,EAAAO,aAAA,GAAA,IAAAP,EAAAO,aAAAP,EAAAO,aACAC,EAAAN,EAAA,IAAAE,EAAA,IAAAE,CAEA,OAAAE,IAGAC,EAAA,SAAAV,GACA,GAAAC,GAAA,GAAAC,MAAA,IAAAF,GACAW,GAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OACAC,EAAAX,EAAAY,cACAC,EAAAH,EAAAV,EAAAc,YACAC,EAAAf,EAAAgB,UACAC,EAAAF,EAAA,IAAAF,EAAA,IAAAF,CAEA,OAAAM,GAUAC,YAAAC,eAAA,OAAA,SAAAC,GACAA,EAAAF,WAAAG,MAAAC,iBAAAF,EACA,IAAAG,GAAAzB,EAAAsB,EAEA,OAAA,IAAAF,YAAAM,WAAAD,KAGAL,WAAAC,eAAA,OAAA,SAAAC,GACAA,EAAAF,WAAAG,MAAAC,iBAAAF,EACA,IAAAG,GAAAd,EAAAW,EAEA,OAAA,IAAAF,YAAAM,WAAAD,KAGAL,WAAAC,eAAA,qBAAA,SAAAM,EAAAC,GACAD,EAAAP,WAAAG,MAAAC,iBAAAG,GACAC,EAAAR,WAAAG,MAAAC,iBAAAI,EACA,IAAAH,GAAA,6CAAAE,EAAA,cAAAC,EAAA,yBAEA,OAAA,IAAAR,YAAAM,WAAAD,KAIA5D,EAAAgE,KAAAjC,GACAkC,SAAA,OACAC,KAAAlC,EACAmC,QAAA,SAAAD,GACAlD,QAAAC,IAAAiD,EACA,IAAAE,GAAApE,EAAA,uCAAAqE,OACAC,EAAAf,WAAAgB,QAAAH,GACAI,EAAAF,EAAAJ,EAEAlE,GAAA,WAAAqE,KAAAG,IAEA1D,MAAA,SAAAF,EAAAC,EAAAC,GACA,GAAAC,GAAAF,EAAA,KAAAC,CACAE,SAAAC,IAAA,mBAAAF,QAMAW,EAAAC,GAAA,QAAA,WACAD,EAAA+C,IAAA","file":"scripts.min.js","sourcesContent":["var cities = [];\nvar substringMatcher = function(strs) {\n  return function findMatches(q, cb) {\n    var matches, substringRegex;\n\n    // an array that will be populated with substring matches\n    matches = [];\n\n    // regex used to determine if a string contains the substring `q`\n    substrRegex = new RegExp(q, 'i');\n\n    // iterate through the pool of strings and for any string that\n    // contains the substring `q`, add it to the `matches` array\n    $.each(strs, function(i, str) {\n      if (substrRegex.test(str)) {\n        matches.push(str);\n      }\n    });\n\n    cb(matches);\n  };\n};\n\n$.getJSON('city.list.json', function(response) {\n    $.each(response, function(index, city) {\n      cities.push(city.name);\n    });\n}).fail(function( jqxhr, textStatus, error ) {\n    var err = textStatus + \", \" + error;\n    console.log( \"Request Failed: \" + err );\n  });\n\n$('#the-basics .typeahead').typeahead({\n  hint: true,\n  highlight: true,\n  minLength: 1\n},\n{\n  name: 'cities',\n  source: substringMatcher(cities)\n});","jQuery(document).ready(function($) {\n  var $search = $('#search');\n\n  $search.on('typeahead:selected', function(event, selection) {\n    var cityName = selection;\n    var openWeatherAPI = 'http://api.openweathermap.org/data/2.5/weather?appid=68d06ff44fb97dc7a6ea98b54f8374ba&callback=';\n    var openWeatherOptions = {\n      mode  : 'JSON',\n      units : 'metric',\n      q     : cityName,\n    };\n\n    var timeConverter = function(UNIX_timestamp){\n      var a = new Date(UNIX_timestamp * 1000);\n      var hour = a.getHours() < 10 ? '0' + a.getHours() : a.getHours();\n      var min = a.getMinutes() < 10 ? '0' + a.getMinutes() : a.getMinutes();\n      var sec = a.getSeconds() < 10 ? '0' + a.getSeconds() : a.getSeconds();\n      var time =  hour + ':' + min + ':' + sec ;\n\n      return time;\n    };\n\n    var dateConverter = function(UNIX_timestamp) {\n      var a = new Date(UNIX_timestamp * 1000);\n      var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n      var year = a.getFullYear();\n      var month = months[a.getMonth()];\n      var date = a.getDate();\n      var displayDate = date + ' ' + month + ' ' + year;\n\n      return displayDate;\n    };\n\n    var displayIcon = function(iconId, description) {\n      var icon = '<img src=\"http://openweathermap.org/img/w/' + iconId + '.png\" alt=\"' + description + '\" class=\"weather-icon\">';\n\n      return icon;\n    };\n\n    // display time helper\n    Handlebars.registerHelper('time', function(timestamp) {\n      timestamp = Handlebars.Utils.escapeExpression(timestamp);\n      var result = timeConverter(timestamp);\n\n      return new Handlebars.SafeString(result);\n    });\n\n    Handlebars.registerHelper('date', function(timestamp) {\n      timestamp = Handlebars.Utils.escapeExpression(timestamp);\n      var result = dateConverter(timestamp);\n\n      return new Handlebars.SafeString(result);\n    });\n\n    Handlebars.registerHelper('displayWeatherIcon', function(src, alt) {\n      src = Handlebars.Utils.escapeExpression(src);\n      alt = Handlebars.Utils.escapeExpression(alt);\n      var result = '<img src=\"http://openweathermap.org/img/w/' + src + '.png\" alt=\"' + alt + '\" class=\"weather-icon\">';\n\n      return new Handlebars.SafeString(result);\n      // <img src=\"{{weather[0].icon}}.png\" alt=\"{{weather[0].description}}\" class=\"weather-icon\">\n    });\n\n    $.ajax(openWeatherAPI, {\n      dataType: 'json',\n      data: openWeatherOptions,\n      success: function(data) {\n        console.log(data);\n        var template = $('[type=\"text/x-handlebars-template\"]').html(),\n            templateFunction = Handlebars.compile(template),\n            htmlContent = templateFunction(data);\n\n        $('ul.list').html(htmlContent); \n      },\n      error: function(jqxhr, textStatus, error) {\n        var err = textStatus + \", \" + error;\n        console.log( \"Request Failed: \" + err );\n      }\n    });\n  }); // end typehead:selected event\n\n  // empty input elem on click for another search\n  $search.on('click', function() {\n    $search.val('');\n  });\n}); // end ready\n\n// Problem:\n  // Every new search adds cards instead of replacing the old ones"]}