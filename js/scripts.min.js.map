{"version":3,"sources":["search.js","weather.js"],"names":["cities","substringMatcher","strs","q","cb","matches","substrRegex","RegExp","$","each","i","str","test","push","getJSON","response","index","city","name","fail","jqxhr","textStatus","error","err","console","log","typeahead","hint","highlight","minLength","source","jQuery","document","ready","weather_code","$search","photos","default","rain","snow","timeConverter","UNIX_timestamp","a","Date","hour","getHours","min","getMinutes","sec","getSeconds","time","dateConverter","months","year","getFullYear","month","getMonth","date","getDate","displayDate","randomNumber","max","Math","floor","random","chooseBackgroundPhoto","code","photo_set","length","displayBackgroundPhoto","css","Handlebars","registerHelper","timestamp","Utils","escapeExpression","result","SafeString","src","alt","displayError","displayData","data","template","templates","htmlContent","html","on","event","selection","cityName","openWeatherAPI","openWeatherOptions","mode","units","ajax","dataType","success","val","weather","id","empty","e","preventDefault","location","reload","dir"],"mappings":"AAAA,GAAAA,WACAC,iBAAA,SAAAC,GACA,MAAA,UAAAC,EAAAC,GACA,GAAAC,EAGAA,MAGAC,YAAA,GAAAC,QAAAJ,EAAA,KAIAK,EAAAC,KAAAP,EAAA,SAAAQ,EAAAC,GACAL,YAAAM,KAAAD,IACAN,EAAAQ,KAAAF,KAIAP,EAAAC,IAIAG,GAAAM,QAAA,iBAAA,SAAAC,GACAP,EAAAC,KAAAM,EAAA,SAAAC,EAAAC,GACAjB,OAAAa,KAAAI,EAAAC,UAEAC,KAAA,SAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAF,EAAA,KAAAC,CACAE,SAAAC,IAAA,mBAAAF,KAGAf,EAAA,0BAAAkB,WACAC,MAAA,EACAC,WAAA,EACAC,UAAA,IAGAX,KAAA,SACAY,OAAA7B,iBAAAD,UCvCA+B,OAAAC,UAAAC,MAAA,SAAAzB,GACA,GAMA0B,GANAC,EAAA3B,EAAA,WACA4B,GACAC,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,YACAC,MAAA,QAAA,QAAA,QAAA,QAAA,SACAC,MAAA,QAAA,QAAA,QAAA,UAIAC,EAAA,SAAAC,GACA,GAAAC,GAAA,GAAAC,MAAA,IAAAF,GACAG,EAAAF,EAAAG,WAAA,GAAA,IAAAH,EAAAG,WAAAH,EAAAG,WACAC,EAAAJ,EAAAK,aAAA,GAAA,IAAAL,EAAAK,aAAAL,EAAAK,aACAC,EAAAN,EAAAO,aAAA,GAAA,IAAAP,EAAAO,aAAAP,EAAAO,aACAC,EAAAN,EAAA,IAAAE,EAAA,IAAAE,CAEA,OAAAE,IAGAC,EAAA,SAAAV,GACA,GAAAC,GAAA,GAAAC,MAAA,IAAAF,GACAW,GAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OACAC,EAAAX,EAAAY,cACAC,EAAAH,EAAAV,EAAAc,YACAC,EAAAf,EAAAgB,UACAC,EAAAF,EAAA,IAAAF,EAAA,IAAAF,CAEA,OAAAM,IASAC,EAAA,SAAAd,EAAAe,GACA,MAAAC,MAAAC,MAAAD,KAAAE,UAAAH,EAAAf,GAAAA,IAGAmB,EAAA,SAAAC,EAAAC,GACA,MAAAD,IAAA,KAAAA,EAAA,IACA9B,EAAAE,KAAAsB,EAAA,EAAAO,EAAA7B,KAAA8B,SACAF,GAAA,KAAAA,EAAA,IACA9B,EAAAG,KAAAqB,EAAA,EAAAO,EAAA5B,KAAA6B,SAEAhC,EAAAA,WAAAwB,EAAA,EAAAO,EAAAA,WAAAC,UAIAC,EAAA,WACA,MAAA7D,GAAA,QAAA8D,IAAA,aAAA,WAAAL,EAAA/B,EAAAE,GAAA,SAGAmC,YAAAC,eAAA,OAAA,SAAAC,GACAA,EAAAF,WAAAG,MAAAC,iBAAAF,EACA,IAAAG,GAAApC,EAAAiC,EAEA,OAAA,IAAAF,YAAAM,WAAAD,KAGAL,WAAAC,eAAA,OAAA,SAAAC,GACAA,EAAAF,WAAAG,MAAAC,iBAAAF,EACA,IAAAG,GAAAzB,EAAAsB,EAEA,OAAA,IAAAF,YAAAM,WAAAD,KAGAL,WAAAC,eAAA,qBAAA,SAAAM,EAAAC,GACAD,EAAAP,WAAAG,MAAAC,iBAAAG,GACAC,EAAAR,WAAAG,MAAAC,iBAAAI,EACA,IAAAH,GAAA,6CAAAE,EAAA,cAAAC,EAAA,yBAEA,OAAA,IAAAR,YAAAM,WAAAD,IAIA,IAAAI,GAAA,SAAA5D,EAAAC,EAAAC,GACA,GAAAC,GAAAF,EAAA,KAAAC,CACAE,SAAAC,IAAA,mBAAAF,IAGA0D,EAAA,SAAAC,GACA,GAAAC,GAAAZ,WAAAa,UAAA,gBACAC,EAAAF,EAAAD,EACA1E,GAAA,WAAA8E,KAAAD,GACAhB,EAAAnC,EAAAE,GAIAD,GAAAoD,GAAA,qBAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAD,EACAE,EAAA,kGACAC,GACAC,KAAA,OACAC,MAAA,SACA3F,EAAAuF,EAGAlF,GAAAuF,KAAAJ,GACAK,SAAA,OACAd,KAAAU,EACAK,QAAA,SAAAf,GACAD,EAAAC,GAEA/C,EAAA+D,IAAA,IACAhE,EAAAgD,EAAAiB,QAAA,GAAAC,GACA5E,QAAAC,IAAAS,IAEAZ,MAAA0D,MAKA7C,EAAAoD,GAAA,QAAA,WACApD,EAAA+D,IAAA,IACA1F,EAAA,WAAA6F,UAIA7F,EAAA,SAAA+E,GAAA,QAAA,SAAAe,GACAA,EAAAC,iBACAC,SAAAC,WAIAjG,EAAA,oBAAA+E,GAAA,QAAA,SAAAe,GACAA,EAAAC,gBAGA,IAAAZ,GAAA,uFACAnF,GAAAuF,KAAA,yBACAE,QAAA,SAAAf,GAEA,GAAAU,IACAzF,EAAA+E,EAAAjE,KACA6E,MAAA,SAGAtF,GAAAuF,KAAAJ,GACAK,SAAA,OACAd,KAAAU,EACAK,QAAA,SAAAf,GACAD,EAAAC,GAEA/C,EAAA+D,IAAA,IACAhE,EAAAgD,EAAAiB,QAAA,GAAAC,IAEA9E,MAAA,SAAAA,GACAE,QAAAkF,IAAApF","file":"scripts.min.js","sourcesContent":["var cities = [];\nvar substringMatcher = function(strs) {\n  return function findMatches(q, cb) {\n    var matches, substringRegex;\n\n    // an array that will be populated with substring matches\n    matches = [];\n\n    // regex used to determine if a string contains the substring `q`\n    substrRegex = new RegExp(q, 'i');\n\n    // iterate through the pool of strings and for any string that\n    // contains the substring `q`, add it to the `matches` array\n    $.each(strs, function(i, str) {\n      if (substrRegex.test(str)) {\n        matches.push(str);\n      }\n    });\n\n    cb(matches);\n  };\n};\n\n$.getJSON('city.list.json', function(response) {\n    $.each(response, function(index, city) {\n      cities.push(city.name);\n    });\n}).fail(function( jqxhr, textStatus, error ) {\n    var err = textStatus + \", \" + error;\n    console.log( \"Request Failed: \" + err );\n  });\n\n$('#the-basics .typeahead').typeahead({\n  hint: true,\n  highlight: true,\n  minLength: 1\n},\n{\n  name: 'cities',\n  source: substringMatcher(cities)\n});","jQuery(document).ready(function($) {\n  var $search = $('#search');\n  var photos = {\n    'default': ['default1', 'default2', 'default3', 'default4', 'default5', 'default6', 'default7'],\n    'rain': ['rain1', 'rain2', 'rain3', 'rain4', 'rain5'],\n    'snow': ['snow1', 'snow2', 'snow3', 'snow4']\n  };\n  var weather_code;\n\n  var timeConverter = function(UNIX_timestamp){\n    var a = new Date(UNIX_timestamp * 1000);\n    var hour = a.getHours() < 10 ? '0' + a.getHours() : a.getHours();\n    var min = a.getMinutes() < 10 ? '0' + a.getMinutes() : a.getMinutes();\n    var sec = a.getSeconds() < 10 ? '0' + a.getSeconds() : a.getSeconds();\n    var time =  hour + ':' + min + ':' + sec ;\n\n    return time;\n  };\n\n  var dateConverter = function(UNIX_timestamp) {\n    var a = new Date(UNIX_timestamp * 1000);\n    var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n    var year = a.getFullYear();\n    var month = months[a.getMonth()];\n    var date = a.getDate();\n    var displayDate = date + ' ' + month + ' ' + year;\n\n    return displayDate;\n  };\n\n  var displayIcon = function(iconId, description) {\n    var icon = '<img src=\"http://openweathermap.org/img/w/' + iconId + '.png\" alt=\"' + description + '\" class=\"weather-icon\">';\n\n    return icon;\n  };\n\n  var randomNumber = function(min , max) {\n    return Math.floor(Math.random() * (max - min) + min);\n  };\n\n  var chooseBackgroundPhoto = function(code, photo_set) {\n    if (code >= 200 && code < 600) {\n      return photos.rain[randomNumber(0, photo_set.rain.length)];\n    } else if (code >= 600 && code < 700) {\n      return photos.snow[randomNumber(0, photo_set.snow.length)];\n    } else {\n      return photos.default[randomNumber(0, photo_set.default.length)];\n    }\n  };\n\n  var displayBackgroundPhoto = function() {\n    return $('body').css('background', 'url(img/' + chooseBackgroundPhoto(weather_code, photos) + '.jpg)');\n  };\n\n  Handlebars.registerHelper('time', function(timestamp) {\n      timestamp = Handlebars.Utils.escapeExpression(timestamp);\n      var result = timeConverter(timestamp);\n\n      return new Handlebars.SafeString(result);\n    });\n\n    Handlebars.registerHelper('date', function(timestamp) {\n      timestamp = Handlebars.Utils.escapeExpression(timestamp);\n      var result = dateConverter(timestamp);\n\n      return new Handlebars.SafeString(result);\n    });\n\n    Handlebars.registerHelper('displayWeatherIcon', function(src, alt) {\n      src = Handlebars.Utils.escapeExpression(src);\n      alt = Handlebars.Utils.escapeExpression(alt);\n      var result = '<img src=\"http://openweathermap.org/img/w/' + src + '.png\" alt=\"' + alt + '\" class=\"weather-icon\">';\n\n      return new Handlebars.SafeString(result);\n      // <img src=\"{{weather[0].icon}}.png\" alt=\"{{weather[0].description}}\" class=\"weather-icon\">\n    });\n\n    var displayError = function(jqxhr, textStatus, error) {\n      var err = textStatus + \", \" + error;\n      console.log( \"Request Failed: \" + err );\n    };\n\n    var displayData = function(data) {\n      var template = Handlebars.templates['display_weather'],\n          htmlContent = template(data);\n      $('ul.list').html(htmlContent);\n      displayBackgroundPhoto(weather_code, photos);\n    };\n\n  // select location event\n  $search.on('typeahead:selected', function(event, selection) {\n    var cityName = selection;\n    var openWeatherAPI = 'http://api.openweathermap.org/data/2.5/weather?appid=68d06ff44fb97dc7a6ea98b54f8374ba&callback=';\n    var openWeatherOptions = {\n      mode  : 'JSON',\n      units : 'metric',\n      q     : cityName,\n    };\n\n    $.ajax(openWeatherAPI, {\n      dataType: 'json',\n      data: openWeatherOptions,\n      success:function(data) {\n        displayData(data);\n        // reset input val after every search\n        $search.val('');\n        weather_code = data.weather[0].id;\n        console.log(weather_code);\n      },\n      error: displayError\n    });\n  }); // end typehead:selected event\n\n  // reset input on click\n  $search.on('click', function() {\n    $search.val('');\n    $('ul.list').empty();\n  });\n\n  // refresh page on click\n  $('#home').on('click', function(e) {\n    e.preventDefault();\n    location.reload();\n  });\n\n  // current location click event\n  $('#currentLocation').on('click', function(e) {\n    e.preventDefault();\n    // alert(\"Current location functionality disabled for the moment.\");\n\n    var openWeatherAPI = 'http://api.openweathermap.org/data/2.5/weather?appid=68d06ff44fb97dc7a6ea98b54f8374ba';\n    $.ajax(\"http://ipinfo.io/json\", {\n      success: function(data) {\n\n        var openWeatherOptions = {\n          q: data.city,\n          units : 'metric'\n        };\n\n        $.ajax(openWeatherAPI, {\n          dataType: 'json',\n          data: openWeatherOptions,\n          success: function(data) {\n            displayData(data);\n            // reset input val after every search\n            $search.val('');\n            weather_code = data.weather[0].id;\n          },\n          error: function(error) {\n            console.dir(error);\n          }\n        });\n      }\n    });\n      \n  }); // end click event\n}); // end ready\n"]}